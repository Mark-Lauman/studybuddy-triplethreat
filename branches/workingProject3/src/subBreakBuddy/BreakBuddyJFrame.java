/*
 * BreakBuddyJFrame.java
 *
 * 03/29/2008 Vic Kao completed the BreakBuddyJFrame.java and all its methods
 * 03/28/2008 Vic Kao implementd the structure
 */

package subBreakBuddy;

import Buddies.*;
import buddyLibrary.*;
import java.util.*;
import javax.swing.*;

/**
 * This class creates a JFrame and a JPanel layouted by NetBeans interface.
 * The class will generates a random integer number between 0 and 99, and
 * the user will need to guess the number correcly within 10 times.
 * @author Team Triple Threat
 * @see <a href="http://java.sun.com/javase/6/docs/api/javax/swing/JPanel.html">
 *      javax.swing.JPanel</a>
 */
public class BreakBuddyJFrame extends javax.swing.JPanel {
    //variables used for guessing game
    /** the maximum number -1 */
    private final int endNum = 100;
    /** the number generated randomly by the computer */
    private int targetNum;
    /** the number guessed by the user */
    private int userGuess;
    //** the counter to count how many times the user has guessed */
    private int countGuess = 0;
    
    Random rand = new Random();
    
    /** the path storing the icons used */
    private String iconPath = System.getProperty("user.dir") + "/Buddies/BreakBuddy/icons/";
    /** the ico used when guessed correctly */
    private ImageIcon correctIcon;
    /** the ico used when guessed incorrectly */
    private ImageIcon wrongIcon;
    /** the ico used when hint shows up */
    private ImageIcon hintIcon;
    
    BreakBuddy breakBuddy;
    /** Creates new form BreakBuddyJFrame */
    public BreakBuddyJFrame(BreakBuddy breakBuddy) {
        //load the interface layouted by NetBeans
        initComponents();
        this.breakBuddy = breakBuddy;
        //generates a random integer between 0 to 99
        targetNum = rand.nextInt(endNum);
        
        //initially there are no icons or hints shown
        ansIconLabel.setVisible(false);
        correctOrWrongTextArea.setVisible(false);
        
        //set the path for the icons
        correctIcon = new ImageIcon(iconPath + "correct.png");
        wrongIcon = new ImageIcon(iconPath + "wrong.png");
        hintIcon = new ImageIcon(iconPath + "hint.png");
        questionIconLabel.setIcon(new javax.swing.ImageIcon(iconPath + "help.png"));
        questionIconLabel.setVisible(true);
        //disable the "Play again!" button
        playAgainButton.setEnabled(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        playAgainButton = new javax.swing.JButton();
        countGuessLabel = new javax.swing.JLabel();
        ansTextField = new javax.swing.JTextField();
        questionIconLabel = new javax.swing.JLabel();
        ansIconLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        correctOrWrongTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setLayout(null);

        okButton.setFont(new java.awt.Font("Arial", 0, 12));
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        add(okButton);
        okButton.setBounds(340, 270, 80, 40);

        clearButton.setFont(new java.awt.Font("Arial", 0, 12));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        add(clearButton);
        clearButton.setBounds(450, 270, 80, 40);

        playAgainButton.setFont(new java.awt.Font("Arial", 0, 12));
        playAgainButton.setText("Play Again!");
        playAgainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAgainButtonActionPerformed(evt);
            }
        });
        add(playAgainButton);
        playAgainButton.setBounds(320, 450, 130, 40);

        countGuessLabel.setFont(new java.awt.Font("Arial", 0, 12));
        countGuessLabel.setText("Number of guess: 0");
        add(countGuessLabel);
        countGuessLabel.setBounds(520, 50, 130, 15);
        add(ansTextField);
        ansTextField.setBounds(480, 200, 50, 20);
        add(questionIconLabel);
        questionIconLabel.setBounds(170, 190, 50, 50);

        ansIconLabel.setPreferredSize(new java.awt.Dimension(48, 48));
        add(ansIconLabel);
        ansIconLabel.setBounds(170, 340, 50, 50);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel1.setText("Please enter a number between 0 and 99 :");
        add(jLabel1);
        jLabel1.setBounds(230, 190, 240, 40);

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        correctOrWrongTextArea.setBackground(jPanel1.getBackground());
        correctOrWrongTextArea.setColumns(20);
        correctOrWrongTextArea.setEditable(false);
        correctOrWrongTextArea.setFont(new java.awt.Font("Arial", 0, 12));
        correctOrWrongTextArea.setLineWrap(true);
        correctOrWrongTextArea.setRows(5);
        correctOrWrongTextArea.setWrapStyleWord(true);
        correctOrWrongTextArea.setAutoscrolls(false);
        correctOrWrongTextArea.setBorder(null);
        jScrollPane1.setViewportView(correctOrWrongTextArea);

        add(jScrollPane1);
        jScrollPane1.setBounds(230, 350, 420, 60);

        jScrollPane2.setBackground(jPanel1.getBackground());
        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setBackground(jPanel1.getBackground());
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 12));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("The computer will generate a random interger number between 0 and 99. You have to guess the number correctly within 10 times! Are you ready? GO!\n");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(null);
        jScrollPane2.setViewportView(jTextArea1);

        add(jScrollPane2);
        jScrollPane2.setBounds(170, 110, 470, 50);

        jScrollPane3.setBackground(jPanel1.getBackground());
        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea2.setBackground(jPanel1.getBackground());
        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setFont(new java.awt.Font("Arial", 0, 10));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("HINT: You may quit playing anytime you want by clicking the \"Back\" button on the top right corner. =)\n");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setAutoscrolls(false);
        jScrollPane3.setViewportView(jTextArea2);

        add(jScrollPane3);
        jScrollPane3.setBounds(460, 450, 186, 70);
    }// </editor-fold>//GEN-END:initComponents

    /** This function handles the event when the "OK" button is clicked
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        try{
            //get the user's input - guessing number
            userGuess = Integer.parseInt(ansTextField.getText());        
            //if the guessed number matches the number generated
            if (targetNum == userGuess) {
                
                correctOrWrongTextArea.setVisible(true);
                //display the message
                String boxContent = "BINGO! The number was " + targetNum + "." +
                        " You just used " + countGuess + " times only! You are so smart! :)";
                correctOrWrongTextArea.setText(boxContent);
                
                //display the icon when guessed correcly
                ansIconLabel.setVisible(true);
                ansIconLabel.setIcon(correctIcon);
                
                //reset the counter
                countGuess = 0;
                //generate a new number between 0 and 99
                targetNum = rand.nextInt(endNum);
                
                countGuessLabel.setText("Number of guess: " + countGuess);
                //disable "OK" and "Clear" buttons, and enable "Play Again" button in the end
                okButton.setEnabled(false);
                clearButton.setEnabled(false);
                playAgainButton.setEnabled(true);
                
                ansTextField.setText(""); 
            }//else the user didn't guessed correctly and display how many chances left
            else{
                countGuess++;
                
                if (countGuess < 10) {                
                    
                    //enable the hint message
                    correctOrWrongTextArea.setVisible(true);
                    
                    String boxcontent="Sorry! Please guess again. ";
                    //if the guessNum is smaller than the targetNum
                    if(userGuess < targetNum)
                        boxcontent = boxcontent + userGuess + " is smaller than the answer.";
                    else
                        boxcontent = boxcontent + userGuess + " is larger than the answer.";
                    
                    boxcontent = boxcontent + " You have " + (10 - countGuess) + " chances left!";
                    
                    correctOrWrongTextArea.setText(boxcontent);
                    
                    //display the icon when guessed incorrecly
                    ansIconLabel.setVisible(true);
                    ansIconLabel.setIcon(wrongIcon);
                    
                    countGuessLabel.setText("Number of guess: " + countGuess);
                }else {
                    //else the user didn't guessed correctly within 10 times
                    correctOrWrongTextArea.setVisible(true);
                    String boxContent = "Sorry! You have guessed 10 times already. " +
                            "The number was " + targetNum + ". A new integer number is now re-generated." +
                            "You may play again!";
                    ansTextField.setText("");       
                    correctOrWrongTextArea.setText(boxContent);
                    //display the icon when guessed incorrecly after using up 10 chances
                    ansIconLabel.setVisible(true);
                    ansIconLabel.setIcon(hintIcon);
                    
                    countGuessLabel.setText("Number of guess: 0");
                    //reset the counter
                    countGuess = 0;
                    //re-generate a new integer
                    targetNum = rand.nextInt(endNum);
                    
                    //disable "OK" and "Clear" buttons, and enable "Play Again" button in the end
                    okButton.setEnabled(false);
                    clearButton.setEnabled(false);
                    playAgainButton.setEnabled(true);
                }
            }
        }catch (Exception ex) {
            //catch the errors for invalid inputs
            correctOrWrongTextArea.setText("Invalid input! Please check it and enter again!");
            correctOrWrongTextArea.setVisible(true);
            ansIconLabel.setIcon(wrongIcon);
            ansIconLabel.setVisible(true);
        }
    }//GEN-LAST:event_okButtonActionPerformed

    /** This function handles the events when "Clear" button is clicked */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        //clear the user's input
        ansTextField.setText("");        
    }//GEN-LAST:event_clearButtonActionPerformed
    
    /** This function handles the events when "Play Again" button is clicked */
    private void playAgainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAgainButtonActionPerformed
        //reset the counter
        countGuess = 0;        
        //disable and enable the corresponding icons used
        ansIconLabel.setVisible(true);
        ansIconLabel.setIcon(hintIcon);
        correctOrWrongTextArea.setVisible(true);
        
        correctOrWrongTextArea.setText("A random integer number between 0 and 99 is now re-generagted! " +
                "Please guess again!");

        //re-generates a new random integer        
        targetNum = rand.nextInt(endNum);
        countGuessLabel.setText("Number of guess: " + countGuess);

        okButton.setEnabled(true);
        clearButton.setEnabled(true);
        playAgainButton.setEnabled(false);
}//GEN-LAST:event_playAgainButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ansIconLabel;
    private javax.swing.JTextField ansTextField;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextArea correctOrWrongTextArea;
    private javax.swing.JLabel countGuessLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton okButton;
    private javax.swing.JButton playAgainButton;
    private javax.swing.JLabel questionIconLabel;
    // End of variables declaration//GEN-END:variables
    
}
